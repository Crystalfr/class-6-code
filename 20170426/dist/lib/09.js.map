{"version":3,"sources":["../../lib/09.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_foo$bar","foo","bar","console","log","_hello","_hello2","a","b","c","d","e"],"mappings":"AAAA;;AAEA,IAAIA,iBAAiB,YAAY;AAAE,aAASC,aAAT,CAAuBC,GAAvB,EAA4BC,CAA5B,EAA+B;AAAE,YAAIC,OAAO,EAAX,CAAe,IAAIC,KAAK,IAAT,CAAe,IAAIC,KAAK,KAAT,CAAgB,IAAIC,KAAKC,SAAT,CAAoB,IAAI;AAAE,iBAAK,IAAIC,KAAKP,IAAIQ,OAAOC,QAAX,GAAT,EAAiCC,EAAtC,EAA0C,EAAEP,KAAK,CAACO,KAAKH,GAAGI,IAAH,EAAN,EAAiBC,IAAxB,CAA1C,EAAyET,KAAK,IAA9E,EAAoF;AAAED,qBAAKW,IAAL,CAAUH,GAAGI,KAAb,EAAqB,IAAIb,KAAKC,KAAKa,MAAL,KAAgBd,CAAzB,EAA4B;AAAQ;AAAE,SAAvJ,CAAwJ,OAAOe,GAAP,EAAY;AAAEZ,iBAAK,IAAL,CAAWC,KAAKW,GAAL;AAAW,SAA5L,SAAqM;AAAE,gBAAI;AAAE,oBAAI,CAACb,EAAD,IAAOI,GAAG,QAAH,CAAX,EAAyBA,GAAG,QAAH;AAAiB,aAAhD,SAAyD;AAAE,oBAAIH,EAAJ,EAAQ,MAAMC,EAAN;AAAW;AAAE,SAAC,OAAOH,IAAP;AAAc,KAAC,OAAO,UAAUF,GAAV,EAAeC,CAAf,EAAkB;AAAE,YAAIgB,MAAMC,OAAN,CAAclB,GAAd,CAAJ,EAAwB;AAAE,mBAAOA,GAAP;AAAa,SAAvC,MAA6C,IAAIQ,OAAOC,QAAP,IAAmBU,OAAOnB,GAAP,CAAvB,EAAoC;AAAE,mBAAOD,cAAcC,GAAd,EAAmBC,CAAnB,CAAP;AAA+B,SAArE,MAA2E;AAAE,kBAAM,IAAImB,SAAJ,CAAc,sDAAd,CAAN;AAA8E;AAAE,KAArO;AAAwO,CAAhoB,EAArB;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIC,WAAW,EAAEC,KAAK,KAAP,EAAcC,KAAK,KAAnB,EAAf;AAAA,IACID,MAAMD,SAASC,GADnB;AAAA,IAEIC,MAAMF,SAASE,GAFnB;;AAIAC,QAAQC,GAAR,CAAYH,GAAZ,E,CAAkB;AAClBE,QAAQC,GAAR,CAAYF,GAAZ,E,CAAkB;;AAElB;;AAEA,IAAIG,SAAS,OAAb;AAAA,IACIC,UAAU7B,eAAe4B,MAAf,EAAuB,CAAvB,CADd;AAAA,IAEIE,IAAID,QAAQ,CAAR,CAFR;AAAA,IAGIE,IAAIF,QAAQ,CAAR,CAHR;AAAA,IAIIG,IAAIH,QAAQ,CAAR,CAJR;AAAA,IAKII,IAAIJ,QAAQ,CAAR,CALR;AAAA,IAMIK,IAAIL,QAAQ,CAAR,CANR;;AAQAH,QAAQC,GAAR,CAAYG,IAAIC,CAAJ,GAAQC,CAAR,GAAYE,CAAxB,E,CAA4B","file":"09.js","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/**\r\n * Created by sks on 2017/4/26.\r\n */\n\n// var [x,y]=getVal(),//函数返回值的解构\n//     [name,,age]=['zf','male','secrect'];//数组解构\n\n// function getVal() {\n//     return [ 1, 2 ];\n// }\n\n// console.log('x:'+x+', y:'+y);//输出：x:1, y:2\n// console.log('name:'+name+', age:'+age);//输出： name:zf, age:secrect\n\n\n// 数组的解构赋值\n// let [foo, [[bar], baz]] = [1, [[2], 3]];\n// console.log(foo); // 1\n// console.log(bar); // 2\n// console.log(baz); // 3\n\n// 对象的解构赋值\nvar _foo$bar = { foo: \"aaa\", bar: \"bbb\" },\n    foo = _foo$bar.foo,\n    bar = _foo$bar.bar;\n\nconsole.log(foo); // \"aaa\"\nconsole.log(bar); // \"bbb\"\n\n// 字符串的解构赋值\n\nvar _hello = 'hello',\n    _hello2 = _slicedToArray(_hello, 5),\n    a = _hello2[0],\n    b = _hello2[1],\n    c = _hello2[2],\n    d = _hello2[3],\n    e = _hello2[4];\n\nconsole.log(a + b + c + e); // 'hello'"]}