{"version":3,"sources":["../../lib/11.js"],"names":["sayHello","name","console","log","sayHello2","arguments","length","undefined","restFunc","a","_len","rest","Array","_key","add","_len2","x","_key2","reduce","m","n","people","people1","people2","people3","apply"],"mappings":"AAAA;;AAEA;;;;AAGA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB;AACA,MAAIA,OAAOA,QAAQ,MAAnB;AACAC,UAAQC,GAAR,CAAY,WAAWF,IAAvB;AACD;;AAED;AACA,SAASG,SAAT,GAAqB;AACnB,MAAIH,OAAOI,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,MAA/E;;AAEAH,UAAQC,GAAR,CAAY,WAAWF,IAAvB;AACD;AACDD,W,CAAY;AACZA,SAAS,IAAT,E,CAAgB;AAChBI,Y,CAAa;AACbA,UAAU,IAAV,E,CAAiB;;AAEjB;AACA,SAASI,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,OAAK,IAAIC,OAAOL,UAAUC,MAArB,EAA6BK,OAAOC,MAAMF,OAAO,CAAP,GAAWA,OAAO,CAAlB,GAAsB,CAA5B,CAApC,EAAoEG,OAAO,CAAhF,EAAmFA,OAAOH,IAA1F,EAAgGG,MAAhG,EAAwG;AACtGF,SAAKE,OAAO,CAAZ,IAAiBR,UAAUQ,IAAV,CAAjB;AACD;;AAEDX,UAAQC,GAAR,CAAYM,CAAZ,EAAeE,IAAf;AACD;AACDH,SAAS,CAAT;AACAA,SAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;;AAEA;AACA,SAASM,GAAT,GAAe;AACb,OAAK,IAAIC,QAAQV,UAAUC,MAAtB,EAA8BU,IAAIJ,MAAMG,KAAN,CAAlC,EAAgDE,QAAQ,CAA7D,EAAgEA,QAAQF,KAAxE,EAA+EE,OAA/E,EAAwF;AACtFD,MAAEC,KAAF,IAAWZ,UAAUY,KAAV,CAAX;AACD;;AAEDf,UAAQC,GAAR,CAAYa,CAAZ;AACA,SAAOA,EAAEE,MAAF,CAAS,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B,WAAOD,IAAIC,CAAX;AACD,GAFM,CAAP;AAGD;AACD;AACAlB,QAAQC,GAAR,CAAYW,IAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAZ,E,CAA2B;AAC3BZ,QAAQC,GAAR,CAAYW,IAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAZ,E,CAAiC;;AAEjC,IAAIO,SAAS,CAAC,IAAD,EAAO,MAAP,EAAe,UAAf,CAAb;;AAEA,SAASrB,QAAT,CAAkBsB,OAAlB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC3CtB,UAAQC,GAAR,CAAY,WAAWmB,OAAX,GAAqB,GAArB,GAA2BC,OAA3B,GAAqC,GAArC,GAA2CC,OAAvD;AACD;AACD;AACAxB,SAASyB,KAAT,CAAelB,SAAf,EAA0Bc,MAA1B,E,CAAmC;;AAEnC;AACArB,SAASyB,KAAT,CAAe,IAAf,EAAqBJ,MAArB,E,CAA8B","file":"11.js","sourcesContent":["'use strict';\n\n/**\r\n * Created by sks on 2017/4/26.\r\n */\nfunction sayHello(name) {\n  //传统的指定默认参数的方式\n  var name = name || 'dude';\n  console.log('Hello ' + name);\n}\n\n//运用ES6的默认参数\nfunction sayHello2() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'dude';\n\n  console.log('Hello ' + name);\n}\nsayHello(); //输出：Hello dude\nsayHello('zf'); //输出：Hello zf\nsayHello2(); //输出：Hello dude\nsayHello2('zf'); //输出：Hello zf\n\n// rest\nfunction restFunc(a) {\n  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  console.log(a, rest);\n}\nrestFunc(1);\nrestFunc(1, 2, 3, 4);\n\n//将所有参数相加的函数\nfunction add() {\n  for (var _len2 = arguments.length, x = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    x[_key2] = arguments[_key2];\n  }\n\n  console.log(x);\n  return x.reduce(function (m, n) {\n    return m + n;\n  });\n}\n//传递任意个数的参数\nconsole.log(add(1, 2, 3)); //输出：6\nconsole.log(add(1, 2, 3, 4, 5)); //输出：15\n\nvar people = ['zf', 'John', 'Sherlock'];\n\nfunction sayHello(people1, people2, people3) {\n  console.log('Hello ' + people1 + ',' + people2 + ',' + people3);\n}\n//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数\nsayHello.apply(undefined, people); //输出：Hello zf,John,Sherlock\n\n//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法\nsayHello.apply(null, people); //输出：Hello zf,John,Sherlock"]}